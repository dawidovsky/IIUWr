fn main() {}

fn my_first_interpreter(code: &str) -> String {
    let code_ignored: String = code.chars().filter(|c| *c == '+' || *c == '.').collect();
    let mut iter: u8 = 0;
    let mut res: String = "".to_string();
    for c in code_ignored.chars() {
        if c == '+' { iter = iter.wrapping_add(1); } else { res.push(iter as char); }
    }
    res
}

#[test]
fn test1() {
    assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+."), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
}

#[test]
fn test2() {
     assert_eq!(my_first_interpreterello, World!");
}

#[test]
fn test3() {
    assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++."), "A");
}

#[test]
fn test4() {
    assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++;++++++++++++++++++++++++++++++++++."), "B");
}

#[test]
fn test5() {
    assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++..pwe"), "AA");
}

#[test]
fn test6() {
    assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++.+++.+++++++++++."), "AWZe");
}

#[test]
fn test7() {
    assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++."), "n");
}

#[test]
fn test8() {
    assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.++."), "AC");
}

#[test]
fn test9() {
    assert_eq!(my_first_interpreter(""), "");
}

#[test]
fn test10() {
    assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++."), "B");
}