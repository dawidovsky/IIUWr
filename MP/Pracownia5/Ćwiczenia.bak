#lang racket

(define (var? t)
  (symbol? t))

(define (neg? t)
  (and
   (list? t)
   (= 2 (length t))
   (eq? 'neg (car t))))

(define (conj? t)
  (and
   (list? t)
   (= 3 (length t))
   (eq? 'conj (car t))))

(define (disj? t)
  (and
   (list? t)
   (= 3 (length t))
   (eq?'disj (car t))))